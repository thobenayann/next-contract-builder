generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id          String    @id @default(cuid())
  firstName   String
  lastName    String
  gender      String
  birthdate   DateTime
  nationality String
  ssn         String
  companyId   String
  contract    Contract?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])

  @@unique([ssn])
}

model Contract {
  id          String    @id @default(cuid())
  type        String
  startDate   DateTime
  endDate     DateTime?
  employeeId  String    @unique
  employee    Employee  @relation(fields: [employeeId], references: [id])
  companyId   String
  clauses     ClausesOnContracts[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

model Clause {
  id         String    @id @default(cuid())
  title      String
  content    String
  category   String 
  contracts  ClausesOnContracts[]
  order      Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  userId     String
  user       User      @relation(fields: [userId], references: [id])
}

model ClausesOnContracts {
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String
  clause     Clause   @relation(fields: [clauseId], references: [id])
  clauseId   String
  order      Int

  @@id([contractId, clauseId])
  @@index([contractId])
  @@index([clauseId])
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  @@map("account")
}

model Session {
  id        String   @id
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  accounts      Account[]
  sessions      Session[]
  employees     Employee[]
  contracts     Contract[]
  clauses       Clause[]

  @@map("user")
}

model VerificationToken {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verification")
} 