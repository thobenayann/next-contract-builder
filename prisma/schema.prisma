generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee {
  id             String       @id @default(cuid())
  firstName      String
  lastName       String
  gender         String
  birthdate      DateTime
  nationality    String
  ssn            String
  organizationId String
  contract       Contract?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([ssn])
}

model Contract {
  id             String               @id @default(cuid())
  type           String
  startDate      DateTime
  endDate        DateTime?
  employeeId     String               @unique
  employee       Employee             @relation(fields: [employeeId], references: [id])
  organizationId String
  organization   Organization         @relation(fields: [organizationId], references: [id])
  clauses        ClausesOnContracts[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  userId         String
  user           User                 @relation(fields: [userId], references: [id])
}

model Clause {
  id        String               @id @default(cuid())
  title     String
  content   String
  category  String
  contracts ClausesOnContracts[]
  order     Int
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  userId    String
  user      User                 @relation(fields: [userId], references: [id])
}

model ClausesOnContracts {
  contract   Contract @relation(fields: [contractId], references: [id])
  contractId String
  clause     Clause   @relation(fields: [clauseId], references: [id])
  clauseId   String
  order      Int

  @@id([contractId, clauseId])
  @@index([contractId])
  @@index([clauseId])
}

model Account {
  id           String    @id
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @map("sessionToken")
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activeOrganizationId String?
  activeOrganization Organization? @relation(fields: [activeOrganizationId], references: [id])

  expiresAt DateTime
  createdAt DateTime
  updatedAt DateTime

  @@map("session")
}

model User {
  id            String     @id
  email         String     @unique
  name          String?
  emailVerified Boolean
  accounts      Account[]
  sessions      Session[]
  employees     Employee[]
  contracts     Contract[]
  clauses       Clause[]
  organizations Member[]
  activeOrganizationId String?
  activeOrganization   Organization? @relation("ActiveOrganization", fields: [activeOrganizationId], references: [id])

  image     String?
  createdAt DateTime
  updatedAt DateTime

  @@map("user")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Organization {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  logo      String?
  metadata  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employees Employee[]
  contracts Contract[]
  members   Member[]
  invitations Invitation[]
  activeUsers User[] @relation("ActiveOrganization")
  sessions  Session[]

  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  role           String
  status         String       @default("pending")
  expiresAt     DateTime
  createdAt     DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
}
